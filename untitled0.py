# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aruMyzhOZbEv4h5DeQTwBd55bmJVXd2F
"""

import pandas as pd
w_restaurant = pd.read_csv('w_restaurant.csv')

w_restaurant.head()

#ขนาด dataset
print(w_restaurant.shape)

#การ projection (เลือกคอลัม)
select_column = ['id','name','weighted_average_rating']
w_restaurant_projection = w_restaurant.loc[:,select_column]
w_restaurant_projection.head(5)

print(w_restaurant.columns)



#quiz 1. ให้เลือกเฉพาะคอลัม 'id','name',จำนวนรีวิว ประเภทร้าน จำนวนเช็คอิน
c = ['id','name','number_of_reviews','category_name','number_of_checkins']
x = w_restaurant.loc[:,c]
x.head(10)

#เลือกแถว เงื่อนไขจากแถวที่เป็นข้อมูลตัวเลข
#ต้องการเฉพาะเเถวที่มี weghted_average_rating > 3.0
condition = w_restaurant['weighted_average_rating']>3.0
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#quiz 2 เลือกเฉพาะ จำนวนรีวิวเกิน 10 (number_of_reviews > 10)
condition = w_restaurant['number_of _reviews'] > 10
w_restaurant_selection  = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#เงื่อนไข คอลัมเป็นข้อมูลประเภทข้อความ
#1.ขึ้นต้นด้วยคำว่า...
#2.ลงท้ายด้วยคำว่า...
#3.มีคำว่า...อยู่ในชื่อ
condition = w_restaurant['name'].str.startswith('ก๋วยเตี๋ยว')
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#quiz 3: หาร้านอยู่ในจังหวัดที่ขึ้นต้นด้ยคำว่า นคร (Nakhon)
condition = w_restaurant['city_name'].str.startswith('Nakhon')
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#ตัวอย่างname ลงท้ายด้วยคำว่า ดงมูลเหล็ก
condition = w_restaurant['name'].str.endswith('ดงมูลเหล็ก')
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#ชื่อร้านมีคำว่า ขาหมู อยู่ในร้าน
condition = w_restaurant['name'].str.contains('ขาหมู')
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#หาว่าแถวใดที่เป็นค่าว่าง
#ตัวอย่าง หาร้านที่ zip code เป็นค่าว่าง
condition = w_restaurant['zipcode'].isna()
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#หาว่ามีแถวใดที่เป็นค่าไม่ว่าง
#ตัวอย่าง หาร้านที่ zipcode เป็นค่าไม่ว่าง
condition = w_restaurant['zipcode'].notna()
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

#การเชื่อมเงื่อนไข and or not
#หาร้านที่มีเงื่อนไข 2 อย่าง
#1. zipcode ไม่ว่าง
#2.และ มีเลข60อยู่ใน zipcode
#and &
#or |
#not ~
condition1 = w_restaurant['zipcode'].notna()
condition2 = w_restaurant['zipcode'].str.contains('60')
condition = condition1 & condition2
w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

condition1 = w_restaurant['weighted_average_rating']>=2
condition2 = w_restaurant['weighted_average_rating']<=4
condition = condition1 & condition2

select_column = ['id','name','weighted_average_rating']
w_restaurant_selection = w_restaurant.loc[condition,select_column]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(10)

condition1= w_restaurant['name'].str.contains('ขาหมู')
condition2 = w_restaurant['name'].str.contains('ก๋วยเตี๋ยว')
condition = condition1 & condition2

w_restaurant_selection = w_restaurant.loc[condition,:]
print(w_restaurant_selection.shape)
w_restaurant_selection.head(100)

print(w_restaurant.columns)

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('study (1).csv')
df.head()

#
df.columns

input_columns = ['Hours']
output_column = ['Scores']

X = df.loc[:,input_columns]
y = df.loc[:,output_columns]

from skelarn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 20,random_state = 1,)

from sklearn.linear_model import LinearRegression
model1 = LinearRegression()
model1.fit(X_train,y_train)

print(model1.intercept_)
print(model1.coef_)

y_p = model1.predict(X_test)

from sklearn import metrics
print(np.sqrt(metrics.mean_squared_error(y_test, y_p)))

X_quiz = [[7.5],[8.5],[9.25]]
y_quiz = model1.predict(X_quiz)
print(y_quiz)

X_quiz = [[12.2],[15.3],[1],[0],[6],[7.2]]
y_quiz = model1.predict(X_quiz)
print(y_quiz)